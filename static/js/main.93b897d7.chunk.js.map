{"version":3,"sources":["logo.svg","App.style.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","css","container","form","imageContainer","image","card","cardBody","businessNameWrapper","businessName","name","profession","contactDetails","address","App","firstNameRef","useRef","lastNameRef","professionRef","mobileRef","officeRef","emailRef","businessNameRef","websiteRef","addressRef","useState","selectedImage","setSelectedImage","styles","Form","Row","Group","as","Col","controlId","Label","Control","type","required","placeholder","onChange","event","current","textContent","target","value","Card","sm","Image","alt","src","URL","createObjectURL","files","Body","Text","ref","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mJAAAA,EAAOC,QAAU,IAA0B,kC,wrECIxBC,YAAH,KAISA,YAAH,KAJf,IAeMC,EAAYD,YAAH,KAQTE,EAAOF,YAAH,KAMJG,EAAiBH,YAAH,KAMdI,EAAQJ,YAAH,KAKLK,EAAOL,YAAH,KAOJM,EAAWN,YAAH,KAIRO,EAAsBP,YAAH,KAInBQ,EAAeR,YAAH,KAKZS,EAAOT,YAAH,KAMJU,EAAaV,YAAH,KAQVW,EAAiBX,YAAH,KASdY,EAAUZ,YAAH,KCkGLa,MA9Kf,WACE,IAAMC,EAAeC,iBAAO,MACtBC,EAAcD,iBAAO,MACrBE,EAAgBF,iBAAO,MACvBG,EAAYH,iBAAO,MACnBI,EAAYJ,iBAAO,MACnBK,EAAWL,iBAAO,MAClBM,EAAkBN,iBAAO,MACzBO,EAAaP,iBAAO,MACpBQ,EAAaR,iBAAO,MATb,EAU6BS,mBAAS,MAVtC,mBAUNC,EAVM,KAUSC,EAVT,KAYb,OACE,mBAAK1B,IAAK2B,GACR,YAACC,EAAA,EAAD,CAAM5B,IAAK2B,GACX,YAACC,EAAA,EAAKC,IAAN,KACA,YAACD,EAAA,EAAKE,MAAN,CAAYC,GAAIC,IAAKC,UAAU,iBACzB,YAACL,EAAA,EAAKM,MAAN,sBACA,YAACN,EAAA,EAAKO,QAAN,CACEC,KAAK,OACL3B,KAAK,eACL4B,UAAQ,EACRC,YAAY,GACZC,SAAU,SAAAC,GACRnB,EAAgBoB,QAAQC,YAAcF,EAAMG,OAAOC,WAK3D,YAAChB,EAAA,EAAKC,IAAN,KACE,YAACD,EAAA,EAAKE,MAAN,CAAYC,GAAIC,IAAKC,UAAU,aAC7B,YAACL,EAAA,EAAKM,MAAN,mBACA,YAACN,EAAA,EAAKO,QAAN,CACEC,KAAK,OACLE,YAAY,mBACZD,UAAQ,EACR5B,KAAK,YACL8B,SAAU,SAAAC,GACR1B,EAAa2B,QAAQC,YAAcF,EAAMG,OAAOC,UAItD,YAAChB,EAAA,EAAKE,MAAN,CAAYC,GAAIC,IAAKC,UAAU,YAC7B,YAACL,EAAA,EAAKM,MAAN,kBACA,YAACN,EAAA,EAAKO,QAAN,CACEC,KAAK,OACL3B,KAAK,WACL6B,YAAY,kBACZD,UAAQ,EACRE,SAAU,SAAAC,GACRxB,EAAYyB,QAAQC,YAAcF,EAAMG,OAAOC,WAKvD,YAAChB,EAAA,EAAKC,IAAN,KACE,YAACD,EAAA,EAAKE,MAAN,CAAYC,GAAIC,IAAKC,UAAU,cAC7B,YAACL,EAAA,EAAKM,MAAN,mBACA,YAACN,EAAA,EAAKO,QAAN,CACEC,KAAK,OACL3B,KAAK,aACL6B,YAAY,aACZC,SAAU,SAAAC,GACRvB,EAAcwB,QAAQC,YAAcF,EAAMG,OAAOC,WAKzD,YAAChB,EAAA,EAAKC,IAAN,KACE,YAACD,EAAA,EAAKE,MAAN,CAAYC,GAAIC,IAAKC,UAAU,UAC7B,YAACL,EAAA,EAAKM,MAAN,eACA,YAACN,EAAA,EAAKO,QAAN,CACEC,KAAK,OACL3B,KAAK,SACL4B,UAAQ,EACRC,YAAY,GACZC,SAAU,SAAAC,GACRtB,EAAUuB,QAAQC,YAAcF,EAAMG,OAAOC,UAInD,YAAChB,EAAA,EAAKE,MAAN,CAAYC,GAAIC,IAAKC,UAAU,UAC7B,YAACL,EAAA,EAAKM,MAAN,eACA,YAACN,EAAA,EAAKO,QAAN,CACEC,KAAK,OACL3B,KAAK,SACL8B,SAAU,SAAAC,GACRrB,EAAUsB,QAAQC,YAAcF,EAAMG,OAAOC,WAKrD,YAAChB,EAAA,EAAKC,IAAN,KACE,YAACD,EAAA,EAAKE,MAAN,CAAYC,GAAIC,IAAKC,UAAU,SAC7B,YAACL,EAAA,EAAKM,MAAN,cACA,YAACN,EAAA,EAAKO,QAAN,CACEC,KAAK,OACL3B,KAAK,QACL4B,UAAQ,EACRE,SAAU,SAAAC,GACRpB,EAASqB,QAAQC,YAAcF,EAAMG,OAAOC,WAKpD,YAAChB,EAAA,EAAKC,IAAN,KACE,YAACD,EAAA,EAAKE,MAAN,CAAYC,GAAIC,IAAKC,UAAU,WAC7B,YAACL,EAAA,EAAKM,MAAN,gBACA,YAACN,EAAA,EAAKO,QAAN,CACEC,KAAK,OACL3B,KAAK,UACL6B,YAAY,GACZC,SAAU,SAAAC,GACRlB,EAAWmB,QAAQC,YAAcF,EAAMG,OAAOC,WAKtD,YAAChB,EAAA,EAAKC,IAAN,KACE,YAACD,EAAA,EAAKE,MAAN,CAAYC,GAAIC,IAAKC,UAAU,WAC7B,YAACL,EAAA,EAAKM,MAAN,gBACA,YAACN,EAAA,EAAKO,QAAN,CACEC,KAAK,OACL3B,KAAK,UACL6B,YAAY,GACZC,SAAU,SAAAC,GACRjB,EAAWkB,QAAQC,YAAcF,EAAMG,OAAOC,YAMxD,YAACC,EAAA,EAAD,CAAM7C,IAAK2B,GACT,YAACE,EAAA,EAAD,KACE,YAACG,EAAA,EAAD,CAAKc,GAAI,EAAG9C,IAAK2B,GAChBF,GACC,YAACsB,EAAA,EAAD,CAAOC,IAAI,GAAGhD,IAAK2B,EAAcsB,IAAKC,IAAIC,gBAAgB1B,KAEhE,uBACA,wBACQA,GAAiB,qBACdW,KAAK,OACN3B,KAAK,UACL8B,SAAU,SAACC,GACXd,EAAiBc,EAAMG,OAAOS,MAAM,QAI1C,YAACpB,EAAA,EAAD,CAAKc,GAAI,GACP,YAACD,EAAA,EAAKQ,KAAN,CAAWrD,IAAK2B,GACd,mBAAM3B,IAAK2B,GACX,YAACkB,EAAA,EAAKS,KAAN,CAAWtD,IAAK2B,EAAqB4B,IAAKlC,KAE1C,YAACwB,EAAA,EAAKS,KAAN,CAAWtD,IAAK2B,GACd,oBAAM4B,IAAKzC,IACX,6BACA,oBAAMyC,IAAKvC,KAEb,YAAC6B,EAAA,EAAKS,KAAN,CAAWtD,IAAK2B,EAAmB4B,IAAKtC,IACxC,mBAAKjB,IAAK2B,GACR,oBAAM4B,IAAKrC,IACX,oBAAMqC,IAAKpC,IACX,oBAAMoC,IAAKnC,IACX,oBAAMmC,IAAKjC,KAEb,YAACuB,EAAA,EAAKS,KAAN,CAAWtD,IAAK2B,EAAgB4B,IAAKhC,UCpK/BiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.93b897d7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","// this comment tells babel to convert jsx to calls to a function called jsx instead of React.createElement\n/** @jsx jsx */\nimport { css, jsx } from \"@emotion/core\";\n\nexport const app = css`\n  text-align: center;\n`;\n\nexport const appHeader = css`\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n`;\n\nexport const container = css`\n  margin: 20px;\n  display: grid;\n  grid-template-rows: 1fr 1fr;\n  grid-gap: 50px;\n  justify-content: space-evenly;\n`;\n\nexport const form = css`\n  border-radius: 5px;\n  padding: 20px;\n  background-color: #f2f2f2;\n`;\n\nexport const imageContainer = css`\n  background-color: #FFFEE4;\n  height: 350px;\n  width: 250px;\n`;\n\nexport const image = css`\n  height: 350px;\n  width: 250px;\n`;\n\nexport const card = css`\n  padding: 15px;\n  height: 400px;\n  width: 700px;\n  background-color: #FFFEE4;\n`;\n\nexport const cardBody = css`\n  padding-right: 70px;\n`;\n\nexport const businessNameWrapper = css`\n  padding-bottom: 40px;\n`;\n\nexport const businessName = css`\n  font-size: 40px;\n  font-family: Cursive;\n`;\n\nexport const name = css`\n  font-size: 20px;\n  font-family: Monospace;\n  line-height: 0.8;\n`;\n\nexport const profession = css`\n  font-style: italic;\n  font-family: Fantasy;\n  font-size: 18px;\n  line-height: 0.8;\n  padding-bottom: 30px;\n`;\n\nexport const contactDetails = css`\n  display: flex;\n  flex-direction: column;\n  font-size: 15px;\n  font-family: Serif;\n  font-weight: bold;\n  padding-bottom: 30px;\n`;\n\nexport const address = css`\n  font-size: 15px;\n  font-family: Serif;\n`;\n","import React, { useRef, useState } from \"react\";\n/** @jsx jsx */ import { jsx } from \"@emotion/core\";\nimport logo from \"./logo.svg\";\nimport Form from \"react-bootstrap/Form\";\nimport Card from \"react-bootstrap/Card\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport Image from \"react-bootstrap/Image\";\nimport \"./App.css\";\nimport * as styles from \"./App.style\";\n\nfunction App() {\n  const firstNameRef = useRef(null);\n  const lastNameRef = useRef(null);\n  const professionRef = useRef(null);\n  const mobileRef = useRef(null);\n  const officeRef = useRef(null);\n  const emailRef = useRef(null);\n  const businessNameRef = useRef(null);\n  const websiteRef = useRef(null);\n  const addressRef = useRef(null);\n  const [selectedImage, setSelectedImage] = useState(null);\n\n  return (\n    <div css={styles.container}>\n      <Form css={styles.form}>\n      <Form.Row>\n      <Form.Group as={Col} controlId=\"Business Name\">\n            <Form.Label>Business Name</Form.Label>\n            <Form.Control\n              type=\"text\"\n              name=\"businessName\"\n              required\n              placeholder=\"\"\n              onChange={event => {\n                businessNameRef.current.textContent = event.target.value;\n              }}\n            />\n          </Form.Group>\n      </Form.Row>\n        <Form.Row>\n          <Form.Group as={Col} controlId=\"firstName\">\n            <Form.Label>First Name</Form.Label>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Enter First Name\"\n              required\n              name=\"firstName\"\n              onChange={event => {\n                firstNameRef.current.textContent = event.target.value;\n              }}\n            />\n          </Form.Group>\n          <Form.Group as={Col} controlId=\"lastName\">\n            <Form.Label>Last Name</Form.Label>\n            <Form.Control\n              type=\"text\"\n              name=\"lastName\"\n              placeholder=\"Enter Last Name\"\n              required\n              onChange={event => {\n                lastNameRef.current.textContent = event.target.value;\n              }}\n            />\n          </Form.Group>\n        </Form.Row>\n        <Form.Row>\n          <Form.Group as={Col} controlId=\"profession\">\n            <Form.Label>Profession</Form.Label>\n            <Form.Control\n              type=\"text\"\n              name=\"profession\"\n              placeholder=\"eg Realtor\"\n              onChange={event => {\n                professionRef.current.textContent = event.target.value;\n              }}\n            />\n          </Form.Group>\n          </Form.Row>\n        <Form.Row>\n          <Form.Group as={Col} controlId=\"mobile\">\n            <Form.Label>Mobile</Form.Label>\n            <Form.Control\n              type=\"text\"\n              name=\"mobile\"\n              required\n              placeholder=\"\"\n              onChange={event => {\n                mobileRef.current.textContent = event.target.value;\n              }}\n            />\n          </Form.Group>\n          <Form.Group as={Col} controlId=\"office\">\n            <Form.Label>Office</Form.Label>\n            <Form.Control\n              type=\"text\"\n              name=\"office\"\n              onChange={event => {\n                officeRef.current.textContent = event.target.value;\n              }}\n            />\n          </Form.Group>\n        </Form.Row>\n        <Form.Row>\n          <Form.Group as={Col} controlId=\"email\">\n            <Form.Label>Email</Form.Label>\n            <Form.Control\n              type=\"text\"\n              name=\"email\"\n              required\n              onChange={event => {\n                emailRef.current.textContent = event.target.value;\n              }}\n            />\n          </Form.Group>\n        </Form.Row>\n        <Form.Row>\n          <Form.Group as={Col} controlId=\"Website\">\n            <Form.Label>Website</Form.Label>\n            <Form.Control\n              type=\"text\"\n              name=\"website\"\n              placeholder=\"\"\n              onChange={event => {\n                websiteRef.current.textContent = event.target.value;\n              }}\n            />\n          </Form.Group>\n        </Form.Row>\n        <Form.Row>\n          <Form.Group as={Col} controlId=\"address\">\n            <Form.Label>Address</Form.Label>\n            <Form.Control\n              type=\"text\"\n              name=\"address\"\n              placeholder=\"\"\n              onChange={event => {\n                addressRef.current.textContent = event.target.value;\n              }}\n            />\n          </Form.Group>\n        </Form.Row>\n      </Form>\n      <Card css={styles.card}>\n        <Row>\n          <Col sm={5} css={styles.imageContainer} >\n          {selectedImage && (\n            <Image alt=\"\" css={styles.image} src={URL.createObjectURL(selectedImage)} />\n          )}\n      <br />\n      <br /> \n            {!selectedImage && <input\n                 type=\"file\"\n                name=\"myImage\"\n                onChange={(event) => {\n                setSelectedImage(event.target.files[0]);\n            }}\n            />}\n          </Col>\n          <Col sm={7}>\n            <Card.Body css={styles.cardBody}>\n              <div  css={styles.businessNameWrapper}>\n              <Card.Text css={styles.businessName} ref={businessNameRef} />\n              </div>\n              <Card.Text css={styles.name}>\n                <span ref={firstNameRef}></span>\n                <span> </span>\n                <span ref={lastNameRef}></span>\n              </Card.Text>\n              <Card.Text css={styles.profession} ref={professionRef} />\n              <div css={styles.contactDetails}>\n                <span ref={mobileRef}></span>\n                <span ref={officeRef}></span>\n                <span ref={emailRef}></span>\n                <span ref={websiteRef}></span>\n              </div>\n              <Card.Text css={styles.address} ref={addressRef}></Card.Text>\n            </Card.Body>\n          </Col>\n        </Row>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}